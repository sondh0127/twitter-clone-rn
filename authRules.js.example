// hasura-user-sync
function hasuraUserSync(user, context, callback) {
  const auth0_id = user.user_id;
  const name = user.nickname;
  const mutation = `mutation($auth0_id: String!, $name: String!) {
    insert_user_one(
      object: { auth0_id: $auth0_id, name: $name }
      on_conflict: { constraint: user_auth0_id_key, update_columns: [last_seen, name] }
    ) {
      __typename
    }
  }`;

  request.post(
    {
      headers: {
        'content-type': 'application/json',
        'x-hasura-admin-secret': configuration.ADMIN_SECRET,
      },
      url: `${configuration.HASURA_GRAPHQL_URL}/v1/graphql`,
      body: JSON.stringify({ query: mutation, variables: { auth0_id, name } }),
    },
    function (error, response, body) {
      if (error) console.log('error', error);
      else console.log(body);
      callback(error, user, context);
    }
  );
}

// hasura-jwt-claim
function hasuraJwtClaim(user, context, callback) {
  const QUERY_BODY = {
    // could get roles here
    query: `query ($auth0_id: String!) {
      user(where: {auth0_id: {_eq: $auth0_id}}) {
        id
      }
    }`,
    variables: { auth0_id: user.user_id },
  };

  request.post(
    {
      headers: {
        'content-type': 'application/json',
        'x-hasura-admin-secret': configuration.ADMIN_SECRET,
      },
      url: `${configuration.HASURA_GRAPHQL_URL}/v1/graphql`,
      body: JSON.stringify(QUERY_BODY),
    },
    function (error, response, body) {
      if (error) console.log('error', error);
      else {
        console.log('body', body);
        context.accessToken['https://hasura.io/jwt/claims'] = {
          'x-hasura-default-role': 'user',
          // can add custom logic to decide allowed roles
          'x-hasura-allowed-roles': ['user'],
          'x-hasura-user-id': JSON.parse(body).data.user[0].id,
          'x-hasura-user-name': user.nickname,
        };
        callback(null, user, context);
      }
    }
  );
}
